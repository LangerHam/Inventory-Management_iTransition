@model Inventory_Management_iTransition.ViewModel.CustomIdManagementViewModel
@using Inventory_Management_iTransition.Services;

@{
    var exampleId = IdFormatService.GeneratePreview(Model.Elements);
}

<div id="custom-id-manager">
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Live Example</h5>
            <p class="card-text">This is a preview of what your custom item IDs will look like based on the current format.</p>
            <p class="h4 font-monospace bg-light p-3 rounded">@exampleId</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-7">
            <h5>ID Elements</h5>
            <p class="text-muted small">Drag elements to reorder them.</p>

            @if (!Model.Elements.Any())
            {
                <p class="text-muted">No ID elements have been added yet.</p>
            }
            else
            {
                <div id="id-element-list">
                    @foreach (var element in Model.Elements)
                    {
                        <div class="card mb-2" data-id="@element.Id">
                            <div class="card-body d-flex justify-content-between align-items-center p-2">
                                <div>
                                    <strong class="card-subtitle">@element.Type</strong>
                                    @if (!string.IsNullOrEmpty(element.ValueOrFormat))
                                    {
                                        <p class="card-text mb-0 small text-muted">Value/Format: @element.ValueOrFormat</p>
                                    }
                                </div>
                                @using (Html.BeginForm("Delete", "CustomId", new { id = element.Id }, FormMethod.Post, new { @class = "d-inline delete-element-form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to remove this element?');">
                                        &times;
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-md-5">
            <div class="card bg-light">
                <div class="card-body">
                    <h5 class="card-title">Add New Element</h5>
                    @using (Html.BeginForm("Create", "CustomId", FormMethod.Post, new { id = "create-element-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.InventoryId)

                        <div class="mb-3">
                            @Html.LabelFor(m => m.NewElement.ElementType, new { @class = "form-label" })
                            @Html.EnumDropDownListFor(m => m.NewElement.ElementType, "Select Element Type", new { @class = "form-select" })
                            @Html.ValidationMessageFor(m => m.NewElement.ElementType, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.NewElement.Value, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.NewElement.Value, new { @class = "form-control", placeholder = "e.g., 'ABC-' or 'yyyy-MM'" })
                            @Html.ValidationMessageFor(m => m.NewElement.Value, "", new { @class = "text-danger" })
                        </div>

                        <button type="submit" class="btn btn-primary">Add Element</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
