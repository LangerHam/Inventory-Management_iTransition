@model Inventory_Management_iTransition.ViewModel.InventoryDetailViewModel
@{
    ViewBag.Title = Model.Inventory.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    public string GetAntiForgeryToken()
    {
        string cookieToken, formToken;
        System.Web.Helpers.AntiForgery.GetTokens(null, out cookieToken, out formToken);
        return cookieToken + ":" + formToken;
    }
}
<div class="container mt-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-0">@Model.Inventory.Title</h2>
            <p class="text-muted mb-0">Owned by @Model.Inventory.Owner.UserName</p>
        </div>
        <div>
            @Html.ActionLink("Add New Item", "Create", "Item", new { inventoryId = Model.Inventory.Id }, new { @class = "btn btn-primary" })
        </div>
    </div>

    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs" id="inventoryTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="items-tab" data-bs-toggle="tab" data-bs-target="#items" type="button" role="tab" aria-controls="items" aria-selected="true">Items</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="fields-tab" data-bs-toggle="tab" data-bs-target="#fields" type="button" role="tab" aria-controls="fields" aria-selected="false">Fields</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="customid-tab" data-bs-toggle="tab" data-bs-target="#customid" type="button" role="tab" aria-controls="customid" aria-selected="false">Custom ID</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings" type="button" role="tab" aria-controls="settings" aria-selected="false">Settings</button>
        </li>
    </ul>

    <!-- Tabs Content -->
    <div class="tab-content pt-3" id="inventoryTabContent">
        <!-- Items Tab -->
        <div class="tab-pane fade show active" id="items" role="tabpanel" aria-labelledby="items-tab">
            <div class="card">
                @using (Html.BeginForm("DeleteMultiple", "Item", FormMethod.Post, new { id = "items-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("inventoryId", Model.Inventory.Id)

                    <!-- Toolbar (hidden by default) -->
                    <div class="card-header bg-light" id="items-toolbar" style="display: none;">
                        <button type="button" class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal">
                            <i class="fas fa-trash-alt"></i> Delete Selected (<span id="selected-count">0</span>)
                        </button>
                    </div>

                    <div class="card-body">
                        @if (!Model.Inventory.Items.Any())
                        {
                            <p class="text-center text-muted">No items have been added to this inventory yet.</p>
                        }
                        else
                        {
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th style="width: 5%;"><input class="form-check-input" type="checkbox" id="select-all-items"></th>
                                        <th>Custom ID</th>
                                        <th>Created By</th>
                                        <th>Created Date</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Inventory.Items)
                                    {
                                        <tr>
                                            <td><input class="form-check-input item-checkbox" type="checkbox" name="itemIds" value="@item.Id"></td>
                                            <td><strong>@Html.DisplayFor(modelItem => item.CustomId)</strong></td>
                                            <td>@Html.DisplayFor(modelItem => item.CreatedBy.UserName)</td>
                                            <td>@item.CreatedAt.ToString("g")</td>
                                            <td class="text-end">
                                                @Html.ActionLink("View Details", "Details", "Item", new { id = item.Id }, new { @class = "btn btn-sm btn-outline-primary" })
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                }
            </div>
        </div>

            <!-- Fields Tab -->
            <div class="tab-pane fade" id="fields" role="tabpanel" aria-labelledby="fields-tab">
                <div id="fields-content-placeholder">
                    <p class="text-center text-muted"><span class="spinner-border spinner-border-sm"></span> Loading field editor...</p>
                </div>
            </div>

            <!-- Custom ID Tab -->
            <div class="tab-pane fade" id="customid" role="tabpanel" aria-labelledby="customid-tab">
                <div id="customid-content-placeholder">
                    <p class="text-center text-muted"><span class="spinner-border spinner-border-sm"></span> Loading ID manager...</p>
                </div>
            </div>

            <!-- Discussion Tab -->
            <div class="tab-pane fade" id="discussion" role="tabpanel" aria-labelledby="discussion-tab">
                <div id="discussion-content-placeholder">
                    <p class="text-center text-muted"><span class="spinner-border spinner-border-sm"></span> Loading discussion...</p>
                </div>
            </div>

            <!-- Settings Tab -->
            <div class="tab-pane fade" id="settings" role="tabpanel" aria-labelledby="settings-tab">
                <div id="settings-content-placeholder">
                    <p class="text-center text-muted"><span class="spinner-border spinner-border-sm"></span> Loading settings...</p>
                </div>
            </div>
        </div>
    </div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the selected items? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-btn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(document).ready(function () {
            var inventoryId = @Model.Inventory.Id;
            var antiForgeryToken = '@GetAntiForgeryToken()';


            var discussionTab = $('#discussion-tab');
            var discussionPlaceholder = $('#discussion-content-placeholder');
            var inventoryIdString = "@Model.Inventory.Id";

            // --- Item Deletion Logic ---
            var toolbar = $('#items-toolbar');
            var selectedCountSpan = $('#selected-count');
            var itemCheckboxes = $('.item-checkbox');
            var selectAllCheckbox = $('#select-all-items');

            function updateToolbar() {
                var checkedCount = itemCheckboxes.filter(':checked').length;
                selectedCountSpan.text(checkedCount);
                if (checkedCount > 0) {
                    toolbar.slideDown();
                } else {
                    toolbar.slideUp();
                }
                selectAllCheckbox.prop('checked', checkedCount > 0 && checkedCount === itemCheckboxes.length);
            }

            selectAllCheckbox.on('change', function () {
                itemCheckboxes.prop('checked', $(this).is(':checked'));
                updateToolbar();
            });

            itemCheckboxes.on('change', function () {
                updateToolbar();
            });

            $('#confirm-delete-btn').on('click', function () {
                $('#items-form').submit();
            });

            discussionTab.one('shown.bs.tab', function() {
                discussionPlaceholder.load('@Url.Action("_Discussion", "Inventory")?inventoryId=' + inventoryIdString, function() {
                    var chat = $.connection.commentHub;

                    chat.client.addNewMessageToPage = function (user, message, timestamp) {
                        var newMessage = $('<div class="mb-2"></div>')
                            .append($('<strong></strong>').text(user + ' '))
                            .append($('<small class="text-muted"></small>').text('(' + timestamp + ')'))
                            .append($('<p class="mb-0"></p>').text(message));

                        $('#no-comments-message').remove();
                        var container = $('#discussion-container');
                        container.append(newMessage);
                        container.scrollTop(container[0].scrollHeight);
                    };

                    $.connection.hub.start().done(function () {
                        chat.server.joinInventoryGroup(inventoryIdString);

                        discussionPlaceholder.on('submit', '#comment-form', function(e) {
                            e.preventDefault();
                            var form = $(this);
                            var messageInput = $('#comment-message-input');

                            $.ajax({
                                url: form.attr('action'),
                                type: form.attr('method'),
                                data: form.serialize(),
                                success: function() {
                                    messageInput.val('').focus();
                                },
                                error: function() {
                                    alert('Error: Could not send message.');
                                }
                            });
                        });
                    });
                });
            })



            // --- Fields Tab Logic ---
            var fieldsTab = $('#fields-tab');
            var fieldsPlaceholder = $('#fields-content-placeholder');
            var fieldsLoaded = false;
            fieldsTab.on('shown.bs.tab', function (e) {
                if (!fieldsLoaded) {
                    fieldsPlaceholder.load('@Url.Action("_FieldList", "CustomField")?inventoryId=' + inventoryId, function(response, status, xhr) {
                        if (status == "error") { fieldsPlaceholder.html("<p class='text-danger'>Error loading field editor.</p>"); }
                        fieldsLoaded = true;
                    });
                }
            });
            fieldsPlaceholder.on('submit', '#create-field-form, .delete-field-form', function (e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function (result) { fieldsPlaceholder.html(result); },
                    error: function () { alert('An error occurred.'); }
                });
            });

            // --- Custom ID Tab Logic ---
            var customIdTab = $('#customid-tab');
            var customIdPlaceholder = $('#customid-content-placeholder');
            var customIdLoaded = false;
            customIdTab.on('shown.bs.tab', function (e) {
                if (!customIdLoaded) {
                    customIdPlaceholder.load('@Url.Action("_IdManager", "CustomId")?inventoryId=' + inventoryId, function(response, status, xhr) {
                        if (status == "error") { customIdPlaceholder.html("<p class='text-danger'>Error loading ID manager.</p>"); }
                        else {
                            var list = document.getElementById('id-element-list');
                            if(list) {
                                new Sortable(list, {
                                    animation: 150,
                                    ghostClass: 'bg-info',
                                    onEnd: function (evt) {
                                        var sortable = this;
                                        var orderedIds = [].slice.call(sortable.el.children).map(function (item) {
                                            return $(item).data('id');
                                        });

                                        $.ajax({
                                            url: '@Url.Action("Reorder", "CustomId")',
                                            type: 'POST',
                                            contentType: 'application/json; charset=utf-8',
                                            headers: { 'RequestVerificationToken': antiForgeryToken },
                                            data: JSON.stringify({ inventoryId: inventoryId, orderedIds: orderedIds }),
                                            error: function () {
                                                alert('Could not save the new order.');
                                            }
                                        });
                                    }
                                });
                            }
                        }
                        customIdLoaded = true;
                    });
                }
            });
            customIdPlaceholder.on('submit', '#create-element-form, .delete-element-form', function (e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function (result) { customIdPlaceholder.html(result); },
                    error: function () { alert('An error occurred.'); }
                });
            });
            // --- Settings Tab Logic (with Auto-Save) ---
            var settingsTab = $('#settings-tab');
            var settingsPlaceholder = $('#settings-content-placeholder');
            var autoSaveTimer;

            settingsTab.one('shown.bs.tab', function (e) {
                settingsPlaceholder.load('@Url.Action("_Settings", "Inventory")?inventoryId=' + inventoryId);
            });

            settingsPlaceholder.on('input change', '#inventory-settings-form :input', function () {
                clearTimeout(autoSaveTimer);
                autoSaveTimer = setTimeout(function () {
                    $('#inventory-settings-form').submit();
                }, 8000);
            });

            settingsPlaceholder.on('submit', '#inventory-settings-form', function (e) {
                e.preventDefault();
                clearTimeout(autoSaveTimer);

                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function (result) {
                        settingsPlaceholder.html(result);
                    },
                    error: function () {
                        alert('An error occurred while saving settings.');
                    }
                });
            });
        });
    </script>
}

